import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.8.0
 * Query Engine version: e6c9b4b2b7fa162d0d459d1863321f547498fcfe
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.business`: Exposes CRUD operations for the **Business** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Businesses
    * const businesses = await prisma.business.findMany()
    * ```
    */
  get business(): BusinessDelegate;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): ProductDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const UserDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const BusinessDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  type: 'type',
  address: 'address',
  location: 'location'
};

export declare type BusinessDistinctFieldEnum = (typeof BusinessDistinctFieldEnum)[keyof typeof BusinessDistinctFieldEnum]


export declare const ProductDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  cost: 'cost',
  count: 'count'
};

export declare type ProductDistinctFieldEnum = (typeof ProductDistinctFieldEnum)[keyof typeof ProductDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model User
 */

export type User = {
  id: string
  createdAt: Date
  updatedAt: Date
  email: string
  password: string
  name: string
  phone: string
}


export type AggregateUser = {
  count: number
}



export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type UserSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  password?: boolean
  name?: boolean
  phone?: boolean
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
 never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User that matches the filter.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find the first User that matches the filter.
   * @param {FindFirstUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstUserArgs>(
    args: Subset<T, FindFirstUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findFirst
 */
export type FindFirstUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which User to fetch.
  **/
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
}



/**
 * Model Business
 */

export type Business = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  description: string
  type: string
  address: string
  location: string
}


export type AggregateBusiness = {
  count: number
}



export type AggregateBusinessArgs = {
  where?: BusinessWhereInput
  orderBy?: Enumerable<BusinessOrderByInput> | BusinessOrderByInput
  cursor?: BusinessWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<BusinessDistinctFieldEnum>
  count?: true
}

export type GetBusinessAggregateType<T extends AggregateBusinessArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type BusinessSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  name?: boolean
  description?: boolean
  type?: boolean
  address?: boolean
  location?: boolean
}

export type BusinessGetPayload<
  S extends boolean | null | undefined | BusinessArgs,
  U = keyof S
> = S extends true
  ? Business
  : S extends undefined
  ? never
  : S extends BusinessArgs | FindManyBusinessArgs
  ? 'include' extends U
    ? Business 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Business ? Business[P]
: 
 never
    }
  : Business
: Business


export interface BusinessDelegate {
  /**
   * Find zero or one Business that matches the filter.
   * @param {FindOneBusinessArgs} args - Arguments to find a Business
   * @example
   * // Get one Business
   * const business = await prisma.business.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneBusinessArgs>(
    args: Subset<T, FindOneBusinessArgs>
  ): CheckSelect<T, Prisma__BusinessClient<Business | null>, Prisma__BusinessClient<BusinessGetPayload<T> | null>>
  /**
   * Find the first Business that matches the filter.
   * @param {FindFirstBusinessArgs} args - Arguments to find a Business
   * @example
   * // Get one Business
   * const business = await prisma.business.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstBusinessArgs>(
    args: Subset<T, FindFirstBusinessArgs>
  ): CheckSelect<T, Prisma__BusinessClient<Business>, Prisma__BusinessClient<BusinessGetPayload<T>>>
  /**
   * Find zero or more Businesses that matches the filter.
   * @param {FindManyBusinessArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Businesses
   * const businesses = await prisma.business.findMany()
   * 
   * // Get first 10 Businesses
   * const businesses = await prisma.business.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const businessWithIdOnly = await prisma.business.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyBusinessArgs>(
    args?: Subset<T, FindManyBusinessArgs>
  ): CheckSelect<T, Promise<Array<Business>>, Promise<Array<BusinessGetPayload<T>>>>
  /**
   * Create a Business.
   * @param {BusinessCreateArgs} args - Arguments to create a Business.
   * @example
   * // Create one Business
   * const Business = await prisma.business.create({
   *   data: {
   *     // ... data to create a Business
   *   }
   * })
   * 
  **/
  create<T extends BusinessCreateArgs>(
    args: Subset<T, BusinessCreateArgs>
  ): CheckSelect<T, Prisma__BusinessClient<Business>, Prisma__BusinessClient<BusinessGetPayload<T>>>
  /**
   * Delete a Business.
   * @param {BusinessDeleteArgs} args - Arguments to delete one Business.
   * @example
   * // Delete one Business
   * const Business = await prisma.business.delete({
   *   where: {
   *     // ... filter to delete one Business
   *   }
   * })
   * 
  **/
  delete<T extends BusinessDeleteArgs>(
    args: Subset<T, BusinessDeleteArgs>
  ): CheckSelect<T, Prisma__BusinessClient<Business>, Prisma__BusinessClient<BusinessGetPayload<T>>>
  /**
   * Update one Business.
   * @param {BusinessUpdateArgs} args - Arguments to update one Business.
   * @example
   * // Update one Business
   * const business = await prisma.business.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends BusinessUpdateArgs>(
    args: Subset<T, BusinessUpdateArgs>
  ): CheckSelect<T, Prisma__BusinessClient<Business>, Prisma__BusinessClient<BusinessGetPayload<T>>>
  /**
   * Delete zero or more Businesses.
   * @param {BusinessDeleteManyArgs} args - Arguments to filter Businesses to delete.
   * @example
   * // Delete a few Businesses
   * const { count } = await prisma.business.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends BusinessDeleteManyArgs>(
    args: Subset<T, BusinessDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Businesses.
   * @param {BusinessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Businesses
   * const business = await prisma.business.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends BusinessUpdateManyArgs>(
    args: Subset<T, BusinessUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Business.
   * @param {BusinessUpsertArgs} args - Arguments to update or create a Business.
   * @example
   * // Update or create a Business
   * const business = await prisma.business.upsert({
   *   create: {
   *     // ... data to create a Business
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Business we want to update
   *   }
   * })
  **/
  upsert<T extends BusinessUpsertArgs>(
    args: Subset<T, BusinessUpsertArgs>
  ): CheckSelect<T, Prisma__BusinessClient<Business>, Prisma__BusinessClient<BusinessGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyBusinessArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateBusinessArgs>(args: Subset<T, AggregateBusinessArgs>): Promise<GetBusinessAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Business.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__BusinessClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Business findOne
 */
export type FindOneBusinessArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
  /**
   * Filter, which Business to fetch.
  **/
  where: BusinessWhereUniqueInput
}


/**
 * Business findFirst
 */
export type FindFirstBusinessArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
  /**
   * Filter, which Business to fetch.
  **/
  where?: BusinessWhereInput
  orderBy?: Enumerable<BusinessOrderByInput> | BusinessOrderByInput
  cursor?: BusinessWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<BusinessDistinctFieldEnum>
}


/**
 * Business findMany
 */
export type FindManyBusinessArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
  /**
   * Filter, which Businesses to fetch.
  **/
  where?: BusinessWhereInput
  /**
   * Determine the order of the Businesses to fetch.
  **/
  orderBy?: Enumerable<BusinessOrderByInput> | BusinessOrderByInput
  /**
   * Sets the position for listing Businesses.
  **/
  cursor?: BusinessWhereUniqueInput
  /**
   * The number of Businesses to fetch. If negative number, it will take Businesses before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Businesses.
  **/
  skip?: number
  distinct?: Enumerable<BusinessDistinctFieldEnum>
}


/**
 * Business create
 */
export type BusinessCreateArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
  /**
   * The data needed to create a Business.
  **/
  data: BusinessCreateInput
}


/**
 * Business update
 */
export type BusinessUpdateArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
  /**
   * The data needed to update a Business.
  **/
  data: BusinessUpdateInput
  /**
   * Choose, which Business to update.
  **/
  where: BusinessWhereUniqueInput
}


/**
 * Business updateMany
 */
export type BusinessUpdateManyArgs = {
  data: BusinessUpdateManyMutationInput
  where?: BusinessWhereInput
}


/**
 * Business upsert
 */
export type BusinessUpsertArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
  /**
   * The filter to search for the Business to update in case it exists.
  **/
  where: BusinessWhereUniqueInput
  /**
   * In case the Business found by the `where` argument doesn't exist, create a new Business with this data.
  **/
  create: BusinessCreateInput
  /**
   * In case the Business was found with the provided `where` argument, update it with this data.
  **/
  update: BusinessUpdateInput
}


/**
 * Business delete
 */
export type BusinessDeleteArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
  /**
   * Filter which Business to delete.
  **/
  where: BusinessWhereUniqueInput
}


/**
 * Business deleteMany
 */
export type BusinessDeleteManyArgs = {
  where?: BusinessWhereInput
}


/**
 * Business without action
 */
export type BusinessArgs = {
  /**
   * Select specific fields to fetch from the Business
  **/
  select?: BusinessSelect | null
}



/**
 * Model Product
 */

export type Product = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  description: string
  cost: string
  count: string
}


export type AggregateProduct = {
  count: number
}



export type AggregateProductArgs = {
  where?: ProductWhereInput
  orderBy?: Enumerable<ProductOrderByInput> | ProductOrderByInput
  cursor?: ProductWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProductDistinctFieldEnum>
  count?: true
}

export type GetProductAggregateType<T extends AggregateProductArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type ProductSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  name?: boolean
  description?: boolean
  cost?: boolean
  count?: boolean
}

export type ProductGetPayload<
  S extends boolean | null | undefined | ProductArgs,
  U = keyof S
> = S extends true
  ? Product
  : S extends undefined
  ? never
  : S extends ProductArgs | FindManyProductArgs
  ? 'include' extends U
    ? Product 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Product ? Product[P]
: 
 never
    }
  : Product
: Product


export interface ProductDelegate {
  /**
   * Find zero or one Product that matches the filter.
   * @param {FindOneProductArgs} args - Arguments to find a Product
   * @example
   * // Get one Product
   * const product = await prisma.product.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProductArgs>(
    args: Subset<T, FindOneProductArgs>
  ): CheckSelect<T, Prisma__ProductClient<Product | null>, Prisma__ProductClient<ProductGetPayload<T> | null>>
  /**
   * Find the first Product that matches the filter.
   * @param {FindFirstProductArgs} args - Arguments to find a Product
   * @example
   * // Get one Product
   * const product = await prisma.product.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstProductArgs>(
    args: Subset<T, FindFirstProductArgs>
  ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>
  /**
   * Find zero or more Products that matches the filter.
   * @param {FindManyProductArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Products
   * const products = await prisma.product.findMany()
   * 
   * // Get first 10 Products
   * const products = await prisma.product.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProductArgs>(
    args?: Subset<T, FindManyProductArgs>
  ): CheckSelect<T, Promise<Array<Product>>, Promise<Array<ProductGetPayload<T>>>>
  /**
   * Create a Product.
   * @param {ProductCreateArgs} args - Arguments to create a Product.
   * @example
   * // Create one Product
   * const Product = await prisma.product.create({
   *   data: {
   *     // ... data to create a Product
   *   }
   * })
   * 
  **/
  create<T extends ProductCreateArgs>(
    args: Subset<T, ProductCreateArgs>
  ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>
  /**
   * Delete a Product.
   * @param {ProductDeleteArgs} args - Arguments to delete one Product.
   * @example
   * // Delete one Product
   * const Product = await prisma.product.delete({
   *   where: {
   *     // ... filter to delete one Product
   *   }
   * })
   * 
  **/
  delete<T extends ProductDeleteArgs>(
    args: Subset<T, ProductDeleteArgs>
  ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>
  /**
   * Update one Product.
   * @param {ProductUpdateArgs} args - Arguments to update one Product.
   * @example
   * // Update one Product
   * const product = await prisma.product.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProductUpdateArgs>(
    args: Subset<T, ProductUpdateArgs>
  ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>
  /**
   * Delete zero or more Products.
   * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
   * @example
   * // Delete a few Products
   * const { count } = await prisma.product.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProductDeleteManyArgs>(
    args: Subset<T, ProductDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Products.
   * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Products
   * const product = await prisma.product.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProductUpdateManyArgs>(
    args: Subset<T, ProductUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Product.
   * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
   * @example
   * // Update or create a Product
   * const product = await prisma.product.upsert({
   *   create: {
   *     // ... data to create a Product
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Product we want to update
   *   }
   * })
  **/
  upsert<T extends ProductUpsertArgs>(
    args: Subset<T, ProductUpsertArgs>
  ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProductArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProductArgs>(args: Subset<T, AggregateProductArgs>): Promise<GetProductAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Product.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProductClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Product findOne
 */
export type FindOneProductArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
  /**
   * Filter, which Product to fetch.
  **/
  where: ProductWhereUniqueInput
}


/**
 * Product findFirst
 */
export type FindFirstProductArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
  /**
   * Filter, which Product to fetch.
  **/
  where?: ProductWhereInput
  orderBy?: Enumerable<ProductOrderByInput> | ProductOrderByInput
  cursor?: ProductWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProductDistinctFieldEnum>
}


/**
 * Product findMany
 */
export type FindManyProductArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
  /**
   * Filter, which Products to fetch.
  **/
  where?: ProductWhereInput
  /**
   * Determine the order of the Products to fetch.
  **/
  orderBy?: Enumerable<ProductOrderByInput> | ProductOrderByInput
  /**
   * Sets the position for listing Products.
  **/
  cursor?: ProductWhereUniqueInput
  /**
   * The number of Products to fetch. If negative number, it will take Products before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Products.
  **/
  skip?: number
  distinct?: Enumerable<ProductDistinctFieldEnum>
}


/**
 * Product create
 */
export type ProductCreateArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
  /**
   * The data needed to create a Product.
  **/
  data: ProductCreateInput
}


/**
 * Product update
 */
export type ProductUpdateArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
  /**
   * The data needed to update a Product.
  **/
  data: ProductUpdateInput
  /**
   * Choose, which Product to update.
  **/
  where: ProductWhereUniqueInput
}


/**
 * Product updateMany
 */
export type ProductUpdateManyArgs = {
  data: ProductUpdateManyMutationInput
  where?: ProductWhereInput
}


/**
 * Product upsert
 */
export type ProductUpsertArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
  /**
   * The filter to search for the Product to update in case it exists.
  **/
  where: ProductWhereUniqueInput
  /**
   * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
  **/
  create: ProductCreateInput
  /**
   * In case the Product was found with the provided `where` argument, update it with this data.
  **/
  update: ProductUpdateInput
}


/**
 * Product delete
 */
export type ProductDeleteArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
  /**
   * Filter which Product to delete.
  **/
  where: ProductWhereUniqueInput
}


/**
 * Product deleteMany
 */
export type ProductDeleteManyArgs = {
  where?: ProductWhereInput
}


/**
 * Product without action
 */
export type ProductArgs = {
  /**
   * Select specific fields to fetch from the Product
  **/
  select?: ProductSelect | null
}



/**
 * Deep Input Types
 */


export type UserWhereInput = {
  AND?: UserWhereInput | Enumerable<UserWhereInput>
  OR?: UserWhereInput | Enumerable<UserWhereInput>
  NOT?: UserWhereInput | Enumerable<UserWhereInput>
  id?: StringFilter | string
  createdAt?: DateTimeFilter | Date | string
  updatedAt?: DateTimeFilter | Date | string
  email?: StringFilter | string
  password?: StringFilter | string
  name?: StringFilter | string
  phone?: StringFilter | string
}

export type UserOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  email?: SortOrder
  password?: SortOrder
  name?: SortOrder
  phone?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: string
  email?: string
  phone?: string
}

export type BusinessWhereInput = {
  AND?: BusinessWhereInput | Enumerable<BusinessWhereInput>
  OR?: BusinessWhereInput | Enumerable<BusinessWhereInput>
  NOT?: BusinessWhereInput | Enumerable<BusinessWhereInput>
  id?: StringFilter | string
  createdAt?: DateTimeFilter | Date | string
  updatedAt?: DateTimeFilter | Date | string
  name?: StringFilter | string
  description?: StringFilter | string
  type?: StringFilter | string
  address?: StringFilter | string
  location?: StringFilter | string
}

export type BusinessOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  name?: SortOrder
  description?: SortOrder
  type?: SortOrder
  address?: SortOrder
  location?: SortOrder
}

export type BusinessWhereUniqueInput = {
  id?: string
  name?: string
}

export type ProductWhereInput = {
  AND?: ProductWhereInput | Enumerable<ProductWhereInput>
  OR?: ProductWhereInput | Enumerable<ProductWhereInput>
  NOT?: ProductWhereInput | Enumerable<ProductWhereInput>
  id?: StringFilter | string
  createdAt?: DateTimeFilter | Date | string
  updatedAt?: DateTimeFilter | Date | string
  name?: StringFilter | string
  description?: StringFilter | string
  cost?: StringFilter | string
  count?: StringFilter | string
}

export type ProductOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  name?: SortOrder
  description?: SortOrder
  cost?: SortOrder
  count?: SortOrder
}

export type ProductWhereUniqueInput = {
  id?: string
  name?: string
}

export type UserCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  password: string
  name: string
  phone: string
}

export type UserUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  phone?: string | StringFieldUpdateOperationsInput
}

export type UserUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  phone?: string | StringFieldUpdateOperationsInput
}

export type BusinessCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  name: string
  description: string
  type: string
  address: string
  location: string
}

export type BusinessUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  type?: string | StringFieldUpdateOperationsInput
  address?: string | StringFieldUpdateOperationsInput
  location?: string | StringFieldUpdateOperationsInput
}

export type BusinessUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  type?: string | StringFieldUpdateOperationsInput
  address?: string | StringFieldUpdateOperationsInput
  location?: string | StringFieldUpdateOperationsInput
}

export type ProductCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  name: string
  description: string
  cost: string
  count: string
}

export type ProductUpdateInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  cost?: string | StringFieldUpdateOperationsInput
  count?: string | StringFieldUpdateOperationsInput
}

export type ProductUpdateManyMutationInput = {
  id?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  description?: string | StringFieldUpdateOperationsInput
  cost?: string | StringFieldUpdateOperationsInput
  count?: string | StringFieldUpdateOperationsInput
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringFilter
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
